//---------------------------------------------------------------------------

#include <vcl.h>
#pragma hdrstop

#include "Project2.h"
#include "mmsystem.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"
TForm1 *Form1;

int x = -8;
int y = -8;

//int s=6;

int ballBounces = 0;
int leftPlayerPoints = 0;
int rightPlayerPoints = 0;
int numberOfRound=1;

void setWindowStartedParameters()
{
   Form1->Label1->Left = Form1->Tlo->Width/2 - Form1->Label1->Width/2;
   Form1->Label2->Left = Form1->Tlo->Width/2 - Form1->Label2->Width/2;
   Form1->Label3->Left = Form1->Tlo->Width/2 - Form1->Label3->Width/2;
   Form1->Label5->Left = Form1->Tlo->Width/2 - Form1->Label1->Width/2;
   Form1->Button2->Left = Form1->Tlo->Width/2 - Form1->Button2->Width/2;
   Form1->Button1->Left = Form1->Tlo->Width/2 - Form1->Button1->Width/2;
   Form1->Button3->Left = Form1->Tlo->Width/2 - Form1->Button1->Width/2;

}

void startGame()
{
   setWindowStartedParameters();

   x = -8;
   y = -8;
   ballBounces = 0;
   Form1->Timer_Ball->Interval=20;

   Form1->PaddleLeft->Left = 50;
   Form1->PaddleLeft->Top = Form1->Tlo->Height/2 - Form1->PaddleLeft->Height/2;
   Form1->PaddleRight->Left = Form1->Tlo->Width - 50 - Form1->PaddleRight->Width;
   Form1->PaddleRight->Top = Form1->Tlo->Height/2 - Form1->PaddleRight->Height/2;

    //serwuje prawy gracz
     if (numberOfRound> 1 && numberOfRound % 2 == 0)
     {
        Form1->Ball->Left = Form1->Tlo->Width - 50 - 20 - 10-36;
        Form1->Ball->Top = Form1->PaddleRight->Top+66-16;
        x = -8, y = -8;

     }
     //serwuje lewy gracz
     else if (numberOfRound >= 1 && numberOfRound % 2 == 1)
     {
        Form1->Ball->Left = 50+20+10;
        Form1->Ball->Top = Form1->PaddleLeft->Top+66-16;
        x = 8, y = 8;
     }

   sndPlaySound("snd/start.wav",SND_ASYNC);
   Application -> ProcessMessages();
   Sleep(1000);

   Form1->Ball->Visible=true;
   Form1->Timer_Ball->Enabled=true;
   Form1->PaddleRight -> Enabled = true;
   Form1->PaddleLeft -> Enabled = true;
   Application -> ProcessMessages();
   Sleep(100);

}

//---------------------------------------------------------------------------
__fastcall TForm1::TForm1(TComponent* Owner)
        : TForm(Owner)
{
}
//---------------------------------------------------------------------------
void __fastcall TForm1::TimerLeftTopTimer(TObject *Sender)
{
        if(PaddleLeft->Top > 5)
        {
          PaddleLeft->Top-=5;
        }
}
//---------------------------------------------------------------------------
void __fastcall TForm1::TimerLeftDownTimer(TObject *Sender)
{
        if(PaddleLeft->Top+PaddleLeft->Height<Tlo->Height-5)
        {
         PaddleLeft->Top+=5;
        }
}
//---------------------------------------------------------------------------
void __fastcall TForm1::TimerRightTopTimer(TObject *Sender)
{
        if(PaddleRight->Top > 5)
        {
          PaddleRight->Top-=5;
        }
}
//---------------------------------------------------------------------------
void __fastcall TForm1::TimerRightDownTimer(TObject *Sender)
{
        if(PaddleRight->Top+PaddleRight->Height<Tlo->Height-10)
        {
         PaddleRight->Top+=10;
        }
}
//---------------------------------------------------------------------------
void __fastcall TForm1::FormKeyDown(TObject *Sender, WORD &Key,
      TShiftState Shift)
{
        if(Key==0x41) TimerLeftTop->Enabled=true;
        if(Key==0x5A) TimerLeftDown->Enabled=true;
        if(Key==VK_UP) TimerRightTop->Enabled=true;
        if(Key==VK_DOWN) TimerRightDown->Enabled=true;
}
//---------------------------------------------------------------------------
void __fastcall TForm1::FormKeyUp(TObject *Sender, WORD &Key,
      TShiftState Shift)
{
        if(Key==0x41) TimerLeftTop->Enabled=false;
        if(Key==0x5A) TimerLeftDown->Enabled=false;
        if(Key==VK_UP) TimerRightTop->Enabled=false;
        if(Key==VK_DOWN) TimerRightDown->Enabled=false;
}
//---------------------------------------------------------------------------
void __fastcall TForm1::Timer_BallTimer(TObject *Sender)
{

    //ruch poczatkowy pilki
    Ball->Left += x;
    Ball->Top += y;

    //odbij pi³kê od górnej sciany

    if(Ball->Top-5 <= Tlo->Top) y = -y;

    //odbij pi³kê od dolnej sciany

    if(Ball->Top+Ball->Height+5 >= Tlo->Height) y = -y;

    //skucha gracza lewego
    if(Ball->Left <= PaddleLeft->Left-5)
    {
     sndPlaySound("snd/loss.wav", SND_ASYNC);
     Timer_Ball->Enabled=false;
     Ball->Visible=false;

     //punkt dla gracza prawego
     rightPlayerPoints++;

     numberOfRound++;

     PaddleLeft->Enabled = false;
     PaddleRight->Enabled = false;

     Label1->Caption="Punkt dla gracza prawego >>";
     Label1->Visible=true;
     Label2->Visible=true;
     Label3->Visible=true;
     Button1->Visible=true;
     Button2->Visible=true;

    }

    //skucha gracza prawego
    if(Ball->Left>=PaddleRight->Left+PaddleRight->Width+5)
    {
     sndPlaySound("snd/loss.wav", SND_ASYNC);
     Timer_Ball->Enabled=false;
     Ball->Visible=false;

     //punkt dla gracza lewego

     leftPlayerPoints++;

     numberOfRound++;

     PaddleLeft->Enabled = false;
     PaddleRight->Enabled = false;

     Label1->Caption="<< Punkt dla gracza lewego";
     Label1->Visible=true;
     Label2->Visible=true;
     Label3->Visible=true;
     Button1->Visible=true;
     Button2->Visible=true;
     }

    //odbicie od paletki
    else if
    (Ball->Top+Ball->Height/2 >= PaddleLeft->Top &&
     Ball->Top+Ball->Height/2 <= PaddleLeft->Top+PaddleLeft->Height &&
     Ball->Left < PaddleLeft->Left+PaddleLeft->Width)
     {
       x = 1.1 * x;
       ballBounces++;
       sndPlaySound("snd/ball.wav", SND_ASYNC);

       if(x<0)
       {
       //w srodek
       if((Ball->Left <= PaddleLeft->Left + PaddleLeft->Width &&
        Ball->Top+Ball->Height/2 <= PaddleLeft->Top+2*PaddleLeft->Height/3 &&
        Ball->Top+Ball->Height/2 >= PaddleLeft->Top + PaddleLeft->Height/3))
            {
             x=-x;
            }
            //góra
        else if ((Ball->Left <= PaddleLeft->Left + PaddleLeft->Width &&
        Ball->Top + Ball->Height/2 < PaddleLeft->Top + PaddleLeft->Height/3 &&
        Ball->Top + Ball->Height/2 >= PaddleLeft->Top))
            {
             x = -  0.9 * x;
            }
        //dol
        else if ((Ball->Left <= PaddleLeft->Left + PaddleLeft->Width &&
        Ball->Top + Ball->Height/2 <=PaddleLeft->Top +  PaddleLeft->Height &&
        Ball->Top + Ball->Height/2 > PaddleLeft->Top + 2/3 * PaddleLeft->Height))
            {
             x = -1.2 * x;
            }
       }
     }

    else if
    (Ball->Top+Ball->Height/2 >= PaddleRight->Top &&
     Ball->Top+Ball->Height/2 <= PaddleRight->Top+PaddleRight->Height &&
     Ball->Left+Ball->Width >= PaddleRight->Left)
     {

       x = 1.1 * x;
       ballBounces++;
       sndPlaySound("snd/ball.wav", SND_ASYNC);
       if (x>0)
       {
        //srodek
       if(Ball->Left <= PaddleRight->Left + PaddleRight->Width &&
       Ball->Top + Ball->Height/2 <= PaddleRight->Top + 2 * PaddleRight->Height/3 &&
       Ball->Top + Ball->Height/2 >= PaddleRight->Top + PaddleRight->Height/3)
            {
             x=-1.2*x;
            }
            //gora
       else if ((Ball->Left + Ball->Width >= PaddleRight->Left &&
       Ball->Top + Ball->Height/2 < PaddleRight->Top + PaddleRight->Height/3 &&
       Ball->Top + Ball->Height/2 >= PaddleRight->Top))
            {
             x = -  0.9 * x;
            }
           //dol
       else if ((Ball->Left <= PaddleRight->Left + PaddleRight->Width &&
       Ball->Top + Ball->Height/2 <= PaddleRight->Top +  PaddleRight->Height &&
       Ball->Top + Ball->Height/2 > PaddleRight->Top + 2/3 * PaddleRight->Height))
            {
             x = -1.2 * x;
            }
       }

     }

     //pokaz punktacje
     AnsiString rightPoints;
     rightPoints=IntToStr(rightPlayerPoints);
     AnsiString leftPoints;
     leftPoints=IntToStr(leftPlayerPoints);
     Label2->Caption="Wynik: "+leftPoints+":"+rightPoints;

     //pokaz ilosc odbic
     AnsiString bounces;
     bounces=IntToStr(ballBounces);
     Label3->Caption="Iloœæ odbiæ: "+ bounces;
}
//---------------------------------------------------------------------------
void __fastcall TForm1::Button1Click(TObject *Sender)
{
 if(Application->MessageBox("Czy na pewno chcesz zagraæ od nowa?", "PotwierdŸ",
    MB_YESNO|MB_ICONQUESTION) == IDYES)
    {
     Button3Click(Form1);
    }
}
//---------------------------------------------------------------------------

void __fastcall TForm1::Button2Click(TObject *Sender)
{

    Button1->Visible=false;
    Button2->Visible=false;
    Button3->Visible=false;

    Label1->Visible=false;
    Label2->Visible=false;
    Label3->Visible=false;
    Label4->Visible=false;
    Label5->Visible=false;

    startGame();

    //Form1->OdliczanieCzasu->Enabled=true;



}
//---------------------------------------------------------------------------

void __fastcall TForm1::FormClose(TObject *Sender, TCloseAction &Action)
{
      if(Application->MessageBox("Czy na pewno zakoñczyc program?", "PotwierdŸ",
      MB_YESNO|MB_ICONQUESTION) == IDNO)
      {
       Action=caNone;
      }
}
//---------------------------------------------------------------------------

void __fastcall TForm1::FormCreate(TObject *Sender)
{
        Application->MessageBox(
        "Witaj w grze PingPong.\n\n"
        "Lewy gracz steruje wciskaj¹c klawisze A oraz Z.\n"
        "Prawy gracz steruje wciskaj¹c strza³ki go góry i w dó³.\n\n"
        "Dla urozmaicenia zabawy:\n"
        "Kiedy odbijesz pi³kê na œrodku paletki, wówczas zmienisz jej k¹t odbicia i pi³ka przyspieszy.\n"
        "Im d³u¿ej odbijasz, tym pi³ka szybciej przemieszcza siê.\n"
        "Mo¿esz dowolnie zmieniac pole gry.\n\n"
        "Mi³ej zabawy!", "PingPong", MB_OK);

}
//---------------------------------------------------------------------------

void __fastcall TForm1::Button3Click(TObject *Sender)
{
    rightPlayerPoints=0;
    leftPlayerPoints=0;
    numberOfRound=1;
    Button2Click(Form1);
}
//---------------------------------------------------------------------------
/*
void __fastcall TForm1::OdliczanieCzasuTimer(TObject *Sender)
{
  s--;

  AnsiString sekund;
  sekund=IntToStr(s);

  Label5->Caption="Gra zacznie siê za: "+sekund+" !";

  if(s<=0)
  {
  s=6;
  OdliczanieCzasu->Enabled=false;
  Label5->Visible=false;
  startGame();
  }
}
*/
//---------------------------------------------------------------------------



